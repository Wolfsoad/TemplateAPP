// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STRACT.Data;

namespace STRACT.Data.Migrations
{
    [DbContext(typeof(PDCContext))]
    [Migration("20211005122502_TesteMigration")]
    partial class TesteMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("ActivityFunctionalRole", b =>
                {
                    b.Property<int>("ActivitiesActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FunctionalRolesFunctionalRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivitiesActivityId", "FunctionalRolesFunctionalRoleId");

                    b.HasIndex("FunctionalRolesFunctionalRoleId");

                    b.ToTable("ActivityFunctionalRole");
                });

            modelBuilder.Entity("ActivityOrganizationalRole", b =>
                {
                    b.Property<int>("ActivitiesActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganizationalRolesOrganizationalRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivitiesActivityId", "OrganizationalRolesOrganizationalRoleId");

                    b.HasIndex("OrganizationalRolesOrganizationalRoleId");

                    b.ToTable("ActivityOrganizationalRole");
                });

            modelBuilder.Entity("ActivitySkill", b =>
                {
                    b.Property<int>("ActivitiesActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillsSkillId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivitiesActivityId", "SkillsSkillId");

                    b.HasIndex("SkillsSkillId");

                    b.ToTable("ActivitySkill");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityGroup", b =>
                {
                    b.Property<int>("ActivityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityGroupId");

                    b.ToTable("ActivityGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInGroup", b =>
                {
                    b.Property<int>("ActivityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityGroupId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivityGroupId");

                    b.HasIndex("ActivityGroupId1");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.FunctionalRole", b =>
                {
                    b.Property<int>("FunctionalRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("FunctionalRoleId");

                    b.ToTable("FunctionalRole");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.OrganizationalRole", b =>
                {
                    b.Property<int>("OrganizationalRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("OrganizationalRoleId");

                    b.ToTable("OrganizationalRole");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SkillGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SkillId");

                    b.HasIndex("SkillGroupId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.SkillGroup", b =>
                {
                    b.Property<int>("SkillGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("SkillGroupId");

                    b.ToTable("SkillGroup");
                });

            modelBuilder.Entity("ActivityFunctionalRole", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.FunctionalRole", null)
                        .WithMany()
                        .HasForeignKey("FunctionalRolesFunctionalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivityOrganizationalRole", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.OrganizationalRole", null)
                        .WithMany()
                        .HasForeignKey("OrganizationalRolesOrganizationalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivitySkill", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInGroup", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.ActivityGroup", "ActivityGroup")
                        .WithMany("ActivityInGroups")
                        .HasForeignKey("ActivityGroupId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.Activity", "Activity")
                        .WithMany("ActivityInGroups")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ActivityGroup");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Skill", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.SkillGroup", "SkillGroup")
                        .WithMany("Skills")
                        .HasForeignKey("SkillGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillGroup");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Activity", b =>
                {
                    b.Navigation("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityGroup", b =>
                {
                    b.Navigation("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.SkillGroup", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
