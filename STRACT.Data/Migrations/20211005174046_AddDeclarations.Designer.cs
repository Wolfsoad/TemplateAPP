// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STRACT.Data;

namespace STRACT.Data.Migrations
{
    [DbContext(typeof(PDCContext))]
    [Migration("20211005174046_AddDeclarations")]
    partial class AddDeclarations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("ActivityFunctionalRole", b =>
                {
                    b.Property<int>("ActivitiesActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FunctionalRolesFunctionalRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivitiesActivityId", "FunctionalRolesFunctionalRoleId");

                    b.HasIndex("FunctionalRolesFunctionalRoleId");

                    b.ToTable("ActivityFunctionalRole");
                });

            modelBuilder.Entity("ActivityOrganizationalRole", b =>
                {
                    b.Property<int>("ActivitiesActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganizationalRolesOrganizationalRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivitiesActivityId", "OrganizationalRolesOrganizationalRoleId");

                    b.HasIndex("OrganizationalRolesOrganizationalRoleId");

                    b.ToTable("ActivityOrganizationalRole");
                });

            modelBuilder.Entity("ActivitySkill", b =>
                {
                    b.Property<int>("ActivitiesActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillsSkillId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivitiesActivityId", "SkillsSkillId");

                    b.HasIndex("SkillsSkillId");

                    b.ToTable("ActivitySkill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationItem", b =>
                {
                    b.Property<int>("DeclarationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Motive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeclarationId");

                    b.HasIndex("UserId");

                    b.ToTable("Declarations");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationRevision", b =>
                {
                    b.Property<int>("DeclarationRevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeclarationItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RevisionDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeclarationRevisionId");

                    b.HasIndex("DeclarationItemId");

                    b.HasIndex("UserId");

                    b.ToTable("DeclarationRevision");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationSignature", b =>
                {
                    b.Property<int>("SignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSigned")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeclarationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SignatureId");

                    b.HasIndex("DeclarationId");

                    b.HasIndex("UserId");

                    b.ToTable("DeclarationSignatures");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityGroup", b =>
                {
                    b.Property<int>("ActivityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityGroupId");

                    b.ToTable("ActivityGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInGroup", b =>
                {
                    b.Property<int>("ActivityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityGroupId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivityGroupId");

                    b.HasIndex("ActivityGroupId1");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.FunctionalRole", b =>
                {
                    b.Property<int>("FunctionalRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("FunctionalRoleId");

                    b.ToTable("FunctionalRole");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.OrganizationalRole", b =>
                {
                    b.Property<int>("OrganizationalRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("OrganizationalRoleId");

                    b.ToTable("OrganizationalRole");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SkillGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SkillId");

                    b.HasIndex("SkillGroupId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.SkillGroup", b =>
                {
                    b.Property<int>("SkillGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("SkillGroupId");

                    b.ToTable("SkillGroup");
                });

            modelBuilder.Entity("STRACT.Entities.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationalRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("OrganizationalRoleId");

                    b.ToTable("PDCUsers");
                });

            modelBuilder.Entity("STRACT.Identity.General.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ActivityFunctionalRole", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.FunctionalRole", null)
                        .WithMany()
                        .HasForeignKey("FunctionalRolesFunctionalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivityOrganizationalRole", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.OrganizationalRole", null)
                        .WithMany()
                        .HasForeignKey("OrganizationalRolesOrganizationalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivitySkill", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationItem", b =>
                {
                    b.HasOne("STRACT.Entities.Users.User", "User")
                        .WithMany("Declarations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationRevision", b =>
                {
                    b.HasOne("STRACT.Entities.Declaration.DeclarationItem", "DeclarationItem")
                        .WithMany("Revisions")
                        .HasForeignKey("DeclarationItemId");

                    b.HasOne("STRACT.Entities.Users.User", "User")
                        .WithMany("DeclarationRevisions")
                        .HasForeignKey("UserId");

                    b.Navigation("DeclarationItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationSignature", b =>
                {
                    b.HasOne("STRACT.Entities.Declaration.DeclarationItem", "Declaration")
                        .WithMany("Signatures")
                        .HasForeignKey("DeclarationId");

                    b.HasOne("STRACT.Entities.Users.User", "User")
                        .WithMany("DeclarationSignatures")
                        .HasForeignKey("UserId");

                    b.Navigation("Declaration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInGroup", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.ActivityGroup", "ActivityGroup")
                        .WithMany("ActivityInGroups")
                        .HasForeignKey("ActivityGroupId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.Activity", "Activity")
                        .WithMany("ActivityInGroups")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ActivityGroup");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Skill", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.SkillGroup", "SkillGroup")
                        .WithMany("Skills")
                        .HasForeignKey("SkillGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillGroup");
                });

            modelBuilder.Entity("STRACT.Entities.Users.User", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.OrganizationalRole", "OrganizationalRole")
                        .WithMany()
                        .HasForeignKey("OrganizationalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationalRole");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationItem", b =>
                {
                    b.Navigation("Revisions");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Activity", b =>
                {
                    b.Navigation("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityGroup", b =>
                {
                    b.Navigation("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.SkillGroup", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("STRACT.Entities.Users.User", b =>
                {
                    b.Navigation("DeclarationRevisions");

                    b.Navigation("Declarations");

                    b.Navigation("DeclarationSignatures");
                });
#pragma warning restore 612, 618
        }
    }
}
