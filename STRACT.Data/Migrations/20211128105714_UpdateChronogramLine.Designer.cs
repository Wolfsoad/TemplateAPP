// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STRACT.Data.Identity;

namespace STRACT.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211128105714_UpdateChronogramLine")]
    partial class UpdateChronogramLine
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("PDC")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ActionItemLineOfProduct", b =>
                {
                    b.Property<int>("ActionItemsActionItemId")
                        .HasColumnType("int");

                    b.Property<int>("LinesOfProductsLineOfProductId")
                        .HasColumnType("int");

                    b.HasKey("ActionItemsActionItemId", "LinesOfProductsLineOfProductId");

                    b.HasIndex("LinesOfProductsLineOfProductId");

                    b.ToTable("ActionItemLineOfProduct");
                });

            modelBuilder.Entity("ActivitySkill", b =>
                {
                    b.Property<int>("ActivitiesActivityId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsSkillId")
                        .HasColumnType("int");

                    b.HasKey("ActivitiesActivityId", "SkillsSkillId");

                    b.HasIndex("SkillsSkillId");

                    b.ToTable("ActivitySkill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Audit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificationLineId")
                        .HasColumnType("int");

                    b.Property<bool>("Concluded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfAudit")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("AuditId");

                    b.HasIndex("CertificationLineId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CertificationLineId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("CertificateId");

                    b.HasIndex("CertificationLineId");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificateProductLine", b =>
                {
                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<int>("ProductLineId")
                        .HasColumnType("int");

                    b.Property<int?>("LineOfProductId")
                        .HasColumnType("int");

                    b.HasKey("CertificateId", "ProductLineId");

                    b.HasIndex("LineOfProductId");

                    b.ToTable("CertificateProductLines");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificationInActionItem", b =>
                {
                    b.Property<int>("ActionItemId")
                        .HasColumnType("int");

                    b.Property<int>("CertificationLineId")
                        .HasColumnType("int");

                    b.HasKey("ActionItemId", "CertificationLineId");

                    b.HasIndex("CertificationLineId");

                    b.ToTable("CertificationInActionItems");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificationLine", b =>
                {
                    b.Property<int>("CertificationLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditFrequency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool>("FactoryAudit")
                        .HasColumnType("bit");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificationLineId");

                    b.HasIndex("EntityId");

                    b.ToTable("CertificationLine");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.ContactPerson", b =>
                {
                    b.Property<int>("ContactPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainContact")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactPersonId");

                    b.HasIndex("EntityId");

                    b.ToTable("ContactPerson");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Entity", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("STRACT.Entities.Chronogram.ChronogramLine", b =>
                {
                    b.Property<int>("ChronogramLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionItemId")
                        .HasColumnType("int");

                    b.Property<int>("ChronogramRevisionId")
                        .HasColumnType("int");

                    b.Property<int>("ChronogramTextId")
                        .HasColumnType("int");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("PercentOfConclusion")
                        .HasColumnType("float");

                    b.Property<DateTime>("PlannedStart")
                        .HasColumnType("datetime2");

                    b.HasKey("ChronogramLineId");

                    b.HasIndex("ActionItemId");

                    b.HasIndex("ChronogramRevisionId");

                    b.HasIndex("ChronogramTextId");

                    b.ToTable("ChronogramLine");
                });

            modelBuilder.Entity("STRACT.Entities.Chronogram.ChronogramRevision", b =>
                {
                    b.Property<int>("ChronogramRevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsibleUserInTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ChronogramRevisionId");

                    b.HasIndex("ProjectItemId");

                    b.HasIndex("ResponsibleUserInTeamId");

                    b.ToTable("ChronogramRevision");
                });

            modelBuilder.Entity("STRACT.Entities.Chronogram.ChronogramText", b =>
                {
                    b.Property<int>("ChronogramTextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Milestone")
                        .HasColumnType("bit");

                    b.Property<bool>("Repeatable")
                        .HasColumnType("bit");

                    b.HasKey("ChronogramTextId");

                    b.ToTable("ChronogramText");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Commission", b =>
                {
                    b.Property<int>("CommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommissionId");

                    b.ToTable("Commission");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.CommissionForProject", b =>
                {
                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Advantages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proposal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportDocuments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommissionId", "ProjectId");

                    b.ToTable("CommissionForProject");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Decision", b =>
                {
                    b.Property<int>("DecisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfDecision")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Minutes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DecisionId");

                    b.HasIndex("CommissionId");

                    b.HasIndex("StatusId");

                    b.ToTable("Decision");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Proposal", b =>
                {
                    b.Property<int>("ProposalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponsibleUserInTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProposalId");

                    b.HasIndex("CommissionId");

                    b.HasIndex("ResponsibleUserInTeamId");

                    b.ToTable("Proposal");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.ProposalStatus", b =>
                {
                    b.Property<int>("ProposalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProposalStatusId");

                    b.ToTable("ProposalStatus");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationItem", b =>
                {
                    b.Property<int>("DeclarationItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Motive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DeclarationItemId");

                    b.HasIndex("UserId");

                    b.ToTable("DeclarationItems");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationRevision", b =>
                {
                    b.Property<int>("DeclarationRevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeclarationItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DeclarationRevisionId");

                    b.HasIndex("DeclarationItemId");

                    b.HasIndex("UserId");

                    b.ToTable("DeclarationRevisions");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationSignature", b =>
                {
                    b.Property<int>("SignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSigned")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeclarationItemId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SignatureId");

                    b.HasIndex("DeclarationItemId");

                    b.HasIndex("UserId");

                    b.ToTable("DeclarationSignatures");
                });

            modelBuilder.Entity("STRACT.Entities.Financial.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("STRACT.Entities.Financial.FinancialLine", b =>
                {
                    b.Property<int>("FinancialLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AccountedValue")
                        .HasColumnType("float");

                    b.Property<int>("ActionItemId")
                        .HasColumnType("int");

                    b.Property<double>("AdjudicatedValueOriginalCurrency")
                        .HasColumnType("float");

                    b.Property<double>("BudgetValue")
                        .HasColumnType("float");

                    b.Property<string>("Claim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExchangeRateToEuro")
                        .HasColumnType("float");

                    b.Property<string>("ExpenseAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinancialLineSubtypeId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialLineTypeId")
                        .HasColumnType("int");

                    b.Property<string>("InvestmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvestmentOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Invoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProposalId")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseRequest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceAcceptance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("FinancialLineId");

                    b.HasIndex("ActionItemId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FinancialLineSubtypeId");

                    b.HasIndex("FinancialLineTypeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProposalId");

                    b.ToTable("FinancialLine");
                });

            modelBuilder.Entity("STRACT.Entities.Financial.FinancialLineSubType", b =>
                {
                    b.Property<int>("FinancialLineSubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FinancialLineSubTypeId");

                    b.ToTable("FinancialLineSubTypes");
                });

            modelBuilder.Entity("STRACT.Entities.Financial.FinancialLineType", b =>
                {
                    b.Property<int>("FinancialLineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FinancialLineTypeId");

                    b.ToTable("FinancialLineTypes");
                });

            modelBuilder.Entity("STRACT.Entities.General.AlertType", b =>
                {
                    b.Property<int>("AlertTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlertTypeId");

                    b.ToTable("AlertTypes");
                });

            modelBuilder.Entity("STRACT.Entities.General.LineOfProduct", b =>
                {
                    b.Property<int>("LineOfProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LineOfProductId");

                    b.ToTable("LinesOfProducts");
                });

            modelBuilder.Entity("STRACT.Entities.General.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("STRACT.Entities.General.ToDoTask", b =>
                {
                    b.Property<int>("ToDoTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConcluded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectItemId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserInTeamId")
                        .HasColumnType("int");

                    b.HasKey("ToDoTaskId");

                    b.HasIndex("ActionItemId");

                    b.HasIndex("ProjectItemId");

                    b.HasIndex("UserInTeamId");

                    b.ToTable("ToDoTask");
                });

            modelBuilder.Entity("STRACT.Entities.General.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityGroup", b =>
                {
                    b.Property<int>("ActivityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityGroupId");

                    b.ToTable("ActivityGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInFunctionalRoles", b =>
                {
                    b.Property<int>("FunctionalRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.HasKey("FunctionalRoleId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityInFunctionalRoles");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInGroup", b =>
                {
                    b.Property<int>("ActivityGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.HasKey("ActivityGroupId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInOrganizationalRole", b =>
                {
                    b.Property<int>("OrganizationalRoleId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationalRoleId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityInOrganizationalRole");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.FunctionalRole", b =>
                {
                    b.Property<int>("FunctionalRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FunctionalRoleId");

                    b.ToTable("FuntionalRoles");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.OrganizationalRole", b =>
                {
                    b.Property<int>("OrganizationalRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationalRoleId");

                    b.ToTable("OrganizationalRoles");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillGroupId")
                        .HasColumnType("int");

                    b.HasKey("SkillId");

                    b.HasIndex("SkillGroupId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.SkillGroup", b =>
                {
                    b.Property<int>("SkillGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillGroupId");

                    b.ToTable("SkillGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.SkillInActivity", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("RequestedScore")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("SkillInActivity");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.UserHoliday", b =>
                {
                    b.Property<int>("UserHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataOfHoliday")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserInTeamId")
                        .HasColumnType("int");

                    b.HasKey("UserHolidayId");

                    b.HasIndex("UserInTeamId");

                    b.ToTable("UserHolidays");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.KanbanBoard", b =>
                {
                    b.Property<int>("KanbanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectItemId")
                        .HasColumnType("int");

                    b.HasKey("KanbanId");

                    b.HasIndex("ProjectItemId")
                        .IsUnique();

                    b.ToTable("KanbanBoard");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.LocationInKanban", b =>
                {
                    b.Property<int>("LocationInKanbanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationInKanbanId");

                    b.ToTable("LocationInKanbans");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityId");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.Sprint", b =>
                {
                    b.Property<int>("SprintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsSprintEnded")
                        .HasColumnType("bit");

                    b.Property<int?>("KanbanBoardKanbanId")
                        .HasColumnType("int");

                    b.Property<int>("PointsDone")
                        .HasColumnType("int");

                    b.Property<int>("PointsRequired")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SprintId");

                    b.HasIndex("KanbanBoardKanbanId");

                    b.ToTable("Sprint");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.TaskInKanban", b =>
                {
                    b.Property<int>("KanbanBoardId")
                        .HasColumnType("int");

                    b.Property<int>("LocationInKanbanId")
                        .HasColumnType("int");

                    b.Property<int>("TaskItemId")
                        .HasColumnType("int");

                    b.Property<int?>("SprintId")
                        .HasColumnType("int");

                    b.Property<int?>("SprintId1")
                        .HasColumnType("int");

                    b.HasKey("KanbanBoardId", "LocationInKanbanId", "TaskItemId");

                    b.HasIndex("LocationInKanbanId");

                    b.HasIndex("SprintId");

                    b.HasIndex("SprintId1");

                    b.HasIndex("TaskItemId")
                        .IsUnique();

                    b.ToTable("TaskInKanban");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.TaskItem", b =>
                {
                    b.Property<int>("TaskItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeatureActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Hours")
                        .HasColumnType("float");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationalRoleId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserInTeamId")
                        .HasColumnType("int");

                    b.HasKey("TaskItemId");

                    b.HasIndex("AuditId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationalRoleId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UserInTeamId");

                    b.ToTable("TaskItem");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.TaskType", b =>
                {
                    b.Property<int>("TaskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskTypeId");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ActionGroup", b =>
                {
                    b.Property<int>("ActionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionGroupId");

                    b.ToTable("ActionGroups");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ActionItem", b =>
                {
                    b.Property<int>("ActionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionPlanRevisionId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedIn")
                        .HasColumnType("datetime2");

                    b.HasKey("ActionItemId");

                    b.HasIndex("ActionGroupId");

                    b.HasIndex("ActionPlanRevisionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProjectItemId");

                    b.ToTable("ActionItem");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ActionPlanRevision", b =>
                {
                    b.Property<int>("ActionPlanRevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionPlanYear")
                        .HasColumnType("int");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<int?>("ProposalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserInTeamId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ActionPlanRevisionId");

                    b.HasIndex("ProposalId")
                        .IsUnique()
                        .HasFilter("[ProposalId] IS NOT NULL");

                    b.HasIndex("UserInTeamId");

                    b.ToTable("ActionPlanRevision");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.AlertInProject", b =>
                {
                    b.Property<int>("AlertTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectItemId")
                        .HasColumnType("int");

                    b.HasKey("AlertTypeId", "ProjectItemId");

                    b.HasIndex("ProjectItemId");

                    b.ToTable("AlertInProject");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.LocationsForAction", b =>
                {
                    b.Property<int>("ActionLineId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionItemId")
                        .HasColumnType("int");

                    b.HasKey("ActionLineId", "LocationId");

                    b.HasIndex("ActionItemId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationsForAction");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ProjectItem", b =>
                {
                    b.Property<int>("ProjectItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConceptsDeveloped")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CoordinatorUserInTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailOfProblem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectedResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainConclusions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MappedBenefits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectItemId");

                    b.HasIndex("CoordinatorUserInTeamId");

                    b.ToTable("ProjectItem");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ProjectMember", b =>
                {
                    b.Property<int>("ProjectItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FunctionalRoleId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionOfFunction")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectItemId", "UserId", "FunctionalRoleId");

                    b.HasIndex("FunctionalRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMember");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.TopicInProject", b =>
                {
                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectItemId")
                        .HasColumnType("int");

                    b.HasKey("TopicId", "ProjectItemId");

                    b.HasIndex("ProjectItemId");

                    b.ToTable("TopicInProject");
                });

            modelBuilder.Entity("STRACT.Entities.Users.UserInTeam", b =>
                {
                    b.Property<int>("UserInTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationalRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserInTeamId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.HasIndex("OrganizationalRoleId");

                    b.ToTable("UserInTeam");
                });

            modelBuilder.Entity("STRACT.Entities.Users.UserSkillsEvaluation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("SkillScore")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkillsEvaluations");
                });

            modelBuilder.Entity("STRACT.Identity.General.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("STRACT.Identity.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.ToTable("ApplicationUser", "Identity");
                });

            modelBuilder.Entity("ActionItemLineOfProduct", b =>
                {
                    b.HasOne("STRACT.Entities.Projects.ActionItem", null)
                        .WithMany()
                        .HasForeignKey("ActionItemsActionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.General.LineOfProduct", null)
                        .WithMany()
                        .HasForeignKey("LinesOfProductsLineOfProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivitySkill", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Audit", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.CertificationLine", "CertificationLine")
                        .WithMany("Audits")
                        .HasForeignKey("CertificationLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.General.Location", "Location")
                        .WithMany("Audits")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Users.UserInTeam", "User")
                        .WithMany("Audits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificationLine");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Certificate", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.CertificationLine", "CertificationLine")
                        .WithMany("Certificates")
                        .HasForeignKey("CertificationLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificationLine");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificateProductLine", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.Certificate", "Certificate")
                        .WithMany("CertificateProductLines")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.General.LineOfProduct", "LineOfProduct")
                        .WithMany("CertificateProductLines")
                        .HasForeignKey("LineOfProductId");

                    b.Navigation("Certificate");

                    b.Navigation("LineOfProduct");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificationInActionItem", b =>
                {
                    b.HasOne("STRACT.Entities.Projects.ActionItem", "ActionItem")
                        .WithMany("CertificationInActionItems")
                        .HasForeignKey("ActionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Certifications.CertificationLine", "Certification")
                        .WithMany("CertificationsInActionItens")
                        .HasForeignKey("CertificationLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionItem");

                    b.Navigation("Certification");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificationLine", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.Entity", "Entity")
                        .WithMany("CertificationLines")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.ContactPerson", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.Entity", "Entity")
                        .WithMany("Contacts")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("STRACT.Entities.Chronogram.ChronogramLine", b =>
                {
                    b.HasOne("STRACT.Entities.Projects.ActionItem", "ActionItem")
                        .WithMany("ChronogramLines")
                        .HasForeignKey("ActionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Chronogram.ChronogramRevision", "ChronogramRevision")
                        .WithMany("ChronogramLines")
                        .HasForeignKey("ChronogramRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Chronogram.ChronogramText", "ChronogramText")
                        .WithMany("ChronogramLines")
                        .HasForeignKey("ChronogramTextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionItem");

                    b.Navigation("ChronogramRevision");

                    b.Navigation("ChronogramText");
                });

            modelBuilder.Entity("STRACT.Entities.Chronogram.ChronogramRevision", b =>
                {
                    b.HasOne("STRACT.Entities.Projects.ProjectItem", "ProjectItem")
                        .WithMany("Chronograms")
                        .HasForeignKey("ProjectItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Users.UserInTeam", "Responsible")
                        .WithMany("ChronogramRevisions")
                        .HasForeignKey("ResponsibleUserInTeamId");

                    b.Navigation("ProjectItem");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.CommissionForProject", b =>
                {
                    b.HasOne("STRACT.Entities.CommissionProposals.Commission", "Commission")
                        .WithMany("CommissionForProjects")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commission");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Decision", b =>
                {
                    b.HasOne("STRACT.Entities.CommissionProposals.Commission", "Commission")
                        .WithMany("Decisions")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.CommissionProposals.ProposalStatus", "Status")
                        .WithMany("Decisions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commission");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Proposal", b =>
                {
                    b.HasOne("STRACT.Entities.CommissionProposals.Commission", "Commission")
                        .WithMany("Proposals")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Users.UserInTeam", "Responsible")
                        .WithMany("Proposals")
                        .HasForeignKey("ResponsibleUserInTeamId");

                    b.Navigation("Commission");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationItem", b =>
                {
                    b.HasOne("STRACT.Entities.Users.UserInTeam", "User")
                        .WithMany("Declarations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationRevision", b =>
                {
                    b.HasOne("STRACT.Entities.Declaration.DeclarationItem", "DeclarationItem")
                        .WithMany("Revisions")
                        .HasForeignKey("DeclarationItemId");

                    b.HasOne("STRACT.Entities.Users.UserInTeam", "User")
                        .WithMany("DeclarationRevisions")
                        .HasForeignKey("UserId");

                    b.Navigation("DeclarationItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationSignature", b =>
                {
                    b.HasOne("STRACT.Entities.Declaration.DeclarationItem", "Declaration")
                        .WithMany("Signatures")
                        .HasForeignKey("DeclarationItemId");

                    b.HasOne("STRACT.Entities.Users.UserInTeam", "User")
                        .WithMany("DeclarationSignatures")
                        .HasForeignKey("UserId");

                    b.Navigation("Declaration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Financial.FinancialLine", b =>
                {
                    b.HasOne("STRACT.Entities.Projects.ActionItem", "ActionItem")
                        .WithMany("FinancialLines")
                        .HasForeignKey("ActionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Financial.Currency", "Currency")
                        .WithMany("FinancialLines")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Financial.FinancialLineSubType", "FinancialLineSubType")
                        .WithMany("FinancialLines")
                        .HasForeignKey("FinancialLineSubtypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Financial.FinancialLineType", "FinancialLineType")
                        .WithMany("FinancialLines")
                        .HasForeignKey("FinancialLineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.General.Location", "Location")
                        .WithMany("FinancialLines")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.CommissionProposals.Proposal", "Proposal")
                        .WithMany("FinancialLines")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionItem");

                    b.Navigation("Currency");

                    b.Navigation("FinancialLineSubType");

                    b.Navigation("FinancialLineType");

                    b.Navigation("Location");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("STRACT.Entities.General.ToDoTask", b =>
                {
                    b.HasOne("STRACT.Entities.Projects.ActionItem", "ActionItem")
                        .WithMany("ToDoTasks")
                        .HasForeignKey("ActionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Projects.ProjectItem", null)
                        .WithMany("toDoTasks")
                        .HasForeignKey("ProjectItemId");

                    b.HasOne("STRACT.Entities.Users.UserInTeam", "UserInTeam")
                        .WithMany("ToDoTasks")
                        .HasForeignKey("UserInTeamId");

                    b.Navigation("ActionItem");

                    b.Navigation("UserInTeam");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInFunctionalRoles", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", "Activity")
                        .WithMany("ActivityInFunctionalRoles")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.FunctionalRole", "FunctionalRole")
                        .WithMany("ActivityInFunctionalRoles")
                        .HasForeignKey("FunctionalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("FunctionalRole");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInGroup", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.ActivityGroup", "ActivityGroup")
                        .WithMany("ActivityInGroups")
                        .HasForeignKey("ActivityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.Activity", "Activity")
                        .WithMany("ActivityInGroups")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ActivityGroup");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInOrganizationalRole", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", "Activity")
                        .WithMany("ActivityInOrganizationalRoles")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.OrganizationalRole", "OrganizationalRole")
                        .WithMany("ActivityInOrganizationalRoles")
                        .HasForeignKey("OrganizationalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("OrganizationalRole");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Skill", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.SkillGroup", "SkillGroup")
                        .WithMany("Skills")
                        .HasForeignKey("SkillGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillGroup");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.SkillInActivity", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.UserHoliday", b =>
                {
                    b.HasOne("STRACT.Entities.Users.UserInTeam", "User")
                        .WithMany("PersonalHolidays")
                        .HasForeignKey("UserInTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.KanbanBoard", b =>
                {
                    b.HasOne("STRACT.Entities.Projects.ProjectItem", "ProjectItem")
                        .WithOne("KanbanBoard")
                        .HasForeignKey("STRACT.Entities.Kanban.KanbanBoard", "ProjectItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectItem");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.Sprint", b =>
                {
                    b.HasOne("STRACT.Entities.Kanban.KanbanBoard", null)
                        .WithMany("Sprints")
                        .HasForeignKey("KanbanBoardKanbanId");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.TaskInKanban", b =>
                {
                    b.HasOne("STRACT.Entities.Kanban.KanbanBoard", "KanbanBoard")
                        .WithMany("Tasks")
                        .HasForeignKey("KanbanBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Kanban.LocationInKanban", "LocationInKanban")
                        .WithMany("Tasks")
                        .HasForeignKey("LocationInKanbanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Kanban.Sprint", "Sprint")
                        .WithMany()
                        .HasForeignKey("SprintId");

                    b.HasOne("STRACT.Entities.Kanban.Sprint", null)
                        .WithMany("Tasks")
                        .HasForeignKey("SprintId1");

                    b.HasOne("STRACT.Entities.Kanban.TaskItem", "TaskItem")
                        .WithOne("TaskInKanban")
                        .HasForeignKey("STRACT.Entities.Kanban.TaskInKanban", "TaskItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KanbanBoard");

                    b.Navigation("LocationInKanban");

                    b.Navigation("Sprint");

                    b.Navigation("TaskItem");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.TaskItem", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.Audit", "Audit")
                        .WithMany("TaskItems")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.Department", "RequestedBy")
                        .WithMany("TaskItems")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.OrganizationalRole", "OrganizationalRole")
                        .WithMany("TaskItems")
                        .HasForeignKey("OrganizationalRoleId");

                    b.HasOne("STRACT.Entities.Kanban.Priority", "Priority")
                        .WithMany("TaskItems")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Kanban.TaskType", "TaskType")
                        .WithMany("TaskItems")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Users.UserInTeam", "UserResponsible")
                        .WithMany("TaskItems")
                        .HasForeignKey("UserInTeamId");

                    b.Navigation("Audit");

                    b.Navigation("OrganizationalRole");

                    b.Navigation("Priority");

                    b.Navigation("RequestedBy");

                    b.Navigation("TaskType");

                    b.Navigation("UserResponsible");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ActionItem", b =>
                {
                    b.HasOne("STRACT.Entities.Projects.ActionGroup", "ActionGroup")
                        .WithMany("ActionItems")
                        .HasForeignKey("ActionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Projects.ActionPlanRevision", "ActionPlanRevision")
                        .WithMany("ActionItems")
                        .HasForeignKey("ActionPlanRevisionId");

                    b.HasOne("STRACT.Entities.HumanResources.Department", "RequestedBy")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Projects.ProjectItem", "ProjectItem")
                        .WithMany("ActionItems")
                        .HasForeignKey("ProjectItemId");

                    b.Navigation("ActionGroup");

                    b.Navigation("ActionPlanRevision");

                    b.Navigation("ProjectItem");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ActionPlanRevision", b =>
                {
                    b.HasOne("STRACT.Entities.CommissionProposals.Proposal", "Proposal")
                        .WithOne("ActionPlanRevision")
                        .HasForeignKey("STRACT.Entities.Projects.ActionPlanRevision", "ProposalId");

                    b.HasOne("STRACT.Entities.Users.UserInTeam", "UserInTeam")
                        .WithMany("ActionPlanRevisions")
                        .HasForeignKey("UserInTeamId");

                    b.Navigation("Proposal");

                    b.Navigation("UserInTeam");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.AlertInProject", b =>
                {
                    b.HasOne("STRACT.Entities.General.AlertType", "AlertType")
                        .WithMany("AlertInProjects")
                        .HasForeignKey("AlertTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Projects.ProjectItem", "ProjectItem")
                        .WithMany("Alerts")
                        .HasForeignKey("ProjectItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertType");

                    b.Navigation("ProjectItem");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.LocationsForAction", b =>
                {
                    b.HasOne("STRACT.Entities.Projects.ActionItem", "ActionItem")
                        .WithMany("Locations")
                        .HasForeignKey("ActionItemId");

                    b.HasOne("STRACT.Entities.General.Location", "Location")
                        .WithMany("Actions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionItem");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ProjectItem", b =>
                {
                    b.HasOne("STRACT.Entities.Users.UserInTeam", "Coordinator")
                        .WithMany("ProjectsCoordinated")
                        .HasForeignKey("CoordinatorUserInTeamId");

                    b.Navigation("Coordinator");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ProjectMember", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.FunctionalRole", "FunctionalRole")
                        .WithMany("Projects")
                        .HasForeignKey("FunctionalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Projects.ProjectItem", "ProjectItem")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Users.UserInTeam", "User")
                        .WithMany("ProjectsInTeam")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FunctionalRole");

                    b.Navigation("ProjectItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.TopicInProject", b =>
                {
                    b.HasOne("STRACT.Entities.Projects.ProjectItem", "ProjectItem")
                        .WithMany("Topics")
                        .HasForeignKey("ProjectItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.General.Topic", "Topic")
                        .WithMany("TopicInProjects")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectItem");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("STRACT.Entities.Users.UserInTeam", b =>
                {
                    b.HasOne("STRACT.Identity.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("STRACT.Entities.Users.UserInTeam", "ApplicationUserId");

                    b.HasOne("STRACT.Entities.HumanResources.OrganizationalRole", "OrganizationalRole")
                        .WithMany()
                        .HasForeignKey("OrganizationalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("OrganizationalRole");
                });

            modelBuilder.Entity("STRACT.Entities.Users.UserSkillsEvaluation", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Users.UserInTeam", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Identity.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("STRACT.Identity.Entities.ApplicationUser", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Audit", b =>
                {
                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Certificate", b =>
                {
                    b.Navigation("CertificateProductLines");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificationLine", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Certificates");

                    b.Navigation("CertificationsInActionItens");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Entity", b =>
                {
                    b.Navigation("CertificationLines");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("STRACT.Entities.Chronogram.ChronogramRevision", b =>
                {
                    b.Navigation("ChronogramLines");
                });

            modelBuilder.Entity("STRACT.Entities.Chronogram.ChronogramText", b =>
                {
                    b.Navigation("ChronogramLines");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Commission", b =>
                {
                    b.Navigation("CommissionForProjects");

                    b.Navigation("Decisions");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Proposal", b =>
                {
                    b.Navigation("ActionPlanRevision");

                    b.Navigation("FinancialLines");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.ProposalStatus", b =>
                {
                    b.Navigation("Decisions");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationItem", b =>
                {
                    b.Navigation("Revisions");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("STRACT.Entities.Financial.Currency", b =>
                {
                    b.Navigation("FinancialLines");
                });

            modelBuilder.Entity("STRACT.Entities.Financial.FinancialLineSubType", b =>
                {
                    b.Navigation("FinancialLines");
                });

            modelBuilder.Entity("STRACT.Entities.Financial.FinancialLineType", b =>
                {
                    b.Navigation("FinancialLines");
                });

            modelBuilder.Entity("STRACT.Entities.General.AlertType", b =>
                {
                    b.Navigation("AlertInProjects");
                });

            modelBuilder.Entity("STRACT.Entities.General.LineOfProduct", b =>
                {
                    b.Navigation("CertificateProductLines");
                });

            modelBuilder.Entity("STRACT.Entities.General.Location", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Audits");

                    b.Navigation("FinancialLines");
                });

            modelBuilder.Entity("STRACT.Entities.General.Topic", b =>
                {
                    b.Navigation("TopicInProjects");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Activity", b =>
                {
                    b.Navigation("ActivityInFunctionalRoles");

                    b.Navigation("ActivityInGroups");

                    b.Navigation("ActivityInOrganizationalRoles");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityGroup", b =>
                {
                    b.Navigation("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Department", b =>
                {
                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.FunctionalRole", b =>
                {
                    b.Navigation("ActivityInFunctionalRoles");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.OrganizationalRole", b =>
                {
                    b.Navigation("ActivityInOrganizationalRoles");

                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.SkillGroup", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.KanbanBoard", b =>
                {
                    b.Navigation("Sprints");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.LocationInKanban", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.Priority", b =>
                {
                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.Sprint", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.TaskItem", b =>
                {
                    b.Navigation("TaskInKanban");
                });

            modelBuilder.Entity("STRACT.Entities.Kanban.TaskType", b =>
                {
                    b.Navigation("TaskItems");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ActionGroup", b =>
                {
                    b.Navigation("ActionItems");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ActionItem", b =>
                {
                    b.Navigation("CertificationInActionItems");

                    b.Navigation("ChronogramLines");

                    b.Navigation("FinancialLines");

                    b.Navigation("Locations");

                    b.Navigation("ToDoTasks");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ActionPlanRevision", b =>
                {
                    b.Navigation("ActionItems");
                });

            modelBuilder.Entity("STRACT.Entities.Projects.ProjectItem", b =>
                {
                    b.Navigation("ActionItems");

                    b.Navigation("Alerts");

                    b.Navigation("Chronograms");

                    b.Navigation("KanbanBoard");

                    b.Navigation("ProjectMembers");

                    b.Navigation("toDoTasks");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("STRACT.Entities.Users.UserInTeam", b =>
                {
                    b.Navigation("ActionPlanRevisions");

                    b.Navigation("Audits");

                    b.Navigation("ChronogramRevisions");

                    b.Navigation("DeclarationRevisions");

                    b.Navigation("Declarations");

                    b.Navigation("DeclarationSignatures");

                    b.Navigation("PersonalHolidays");

                    b.Navigation("ProjectsCoordinated");

                    b.Navigation("ProjectsInTeam");

                    b.Navigation("Proposals");

                    b.Navigation("TaskItems");

                    b.Navigation("ToDoTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
