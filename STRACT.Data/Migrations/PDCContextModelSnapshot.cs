// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STRACT.Data;

namespace STRACT.Data.Migrations
{
    [DbContext(typeof(PDCContext))]
    partial class PDCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("ActivityFunctionalRole", b =>
                {
                    b.Property<int>("ActivitiesActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FunctionalRolesFunctionalRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivitiesActivityId", "FunctionalRolesFunctionalRoleId");

                    b.HasIndex("FunctionalRolesFunctionalRoleId");

                    b.ToTable("ActivityFunctionalRole");
                });

            modelBuilder.Entity("ActivityOrganizationalRole", b =>
                {
                    b.Property<int>("ActivitiesActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganizationalRolesOrganizationalRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivitiesActivityId", "OrganizationalRolesOrganizationalRoleId");

                    b.HasIndex("OrganizationalRolesOrganizationalRoleId");

                    b.ToTable("ActivityOrganizationalRole");
                });

            modelBuilder.Entity("ActivitySkill", b =>
                {
                    b.Property<int>("ActivitiesActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillsSkillId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivitiesActivityId", "SkillsSkillId");

                    b.HasIndex("SkillsSkillId");

                    b.ToTable("ActivitySkill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Audit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CertificationLineId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Concluded")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfAudit")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuditId");

                    b.HasIndex("CertificationLineId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("CertificationLineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EmissionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("CertificateId");

                    b.HasIndex("CertificationLineId");

                    b.ToTable("Certificate");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificateProductLine", b =>
                {
                    b.Property<int>("ProductLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CertificateId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LineOfProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductLineId");

                    b.HasIndex("CertificateId");

                    b.HasIndex("LineOfProductId");

                    b.ToTable("CertificateProductLines");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificationLine", b =>
                {
                    b.Property<int>("CertificationLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuditFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FactoryAudit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FolderPath")
                        .HasColumnType("TEXT");

                    b.HasKey("CertificationLineId");

                    b.HasIndex("EntityId");

                    b.ToTable("CertificationLine");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.ContactPerson", b =>
                {
                    b.Property<int>("ContactPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMainContact")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("ContactPersonId");

                    b.HasIndex("EntityId");

                    b.ToTable("ContactPerson");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Entity", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityId");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Commission", b =>
                {
                    b.Property<int>("CommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("CommissionId");

                    b.ToTable("Commission");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.CommissionForProject", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Advantages")
                        .HasColumnType("TEXT");

                    b.Property<int>("CommissionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Justification")
                        .HasColumnType("TEXT");

                    b.Property<string>("Proposal")
                        .HasColumnType("TEXT");

                    b.Property<string>("SupportDocuments")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId");

                    b.HasIndex("CommissionId");

                    b.ToTable("CommissionForProjects");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Decision", b =>
                {
                    b.Property<int>("DecisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommissionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfDecision")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Minutes")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.HasKey("DecisionId");

                    b.HasIndex("CommissionId");

                    b.HasIndex("StatusId");

                    b.ToTable("Decision");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Proposal", b =>
                {
                    b.Property<int>("ProposalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("CommissionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProposalId");

                    b.HasIndex("CommissionId");

                    b.HasIndex("UserId");

                    b.ToTable("Proposal");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.ProposalStatus", b =>
                {
                    b.Property<int>("ProposalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("ProposalStatusId");

                    b.ToTable("ProposalStatus");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationItem", b =>
                {
                    b.Property<int>("DeclarationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Motive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeclarationId");

                    b.HasIndex("UserId");

                    b.ToTable("Declarations");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationRevision", b =>
                {
                    b.Property<int>("DeclarationRevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeclarationItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RevisionDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeclarationRevisionId");

                    b.HasIndex("DeclarationItemId");

                    b.HasIndex("UserId");

                    b.ToTable("DeclarationRevision");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationSignature", b =>
                {
                    b.Property<int>("SignatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSigned")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeclarationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SignatureId");

                    b.HasIndex("DeclarationId");

                    b.HasIndex("UserId");

                    b.ToTable("DeclarationSignatures");
                });

            modelBuilder.Entity("STRACT.Entities.General.LineOfProduct", b =>
                {
                    b.Property<int>("LineOfProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("LineOfProductId");

                    b.ToTable("LineOfProduct");
                });

            modelBuilder.Entity("STRACT.Entities.General.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityGroup", b =>
                {
                    b.Property<int>("ActivityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityGroupId");

                    b.ToTable("ActivityGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInGroup", b =>
                {
                    b.Property<int>("ActivityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityGroupId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivityGroupId");

                    b.HasIndex("ActivityGroupId1");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.FunctionalRole", b =>
                {
                    b.Property<int>("FunctionalRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("FunctionalRoleId");

                    b.ToTable("FunctionalRole");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.OrganizationalRole", b =>
                {
                    b.Property<int>("OrganizationalRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("OrganizationalRoleId");

                    b.ToTable("OrganizationalRole");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SkillGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SkillId");

                    b.HasIndex("SkillGroupId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.SkillGroup", b =>
                {
                    b.Property<int>("SkillGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("SkillGroupId");

                    b.ToTable("SkillGroup");
                });

            modelBuilder.Entity("STRACT.Entities.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizationalRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("OrganizationalRoleId");

                    b.ToTable("PDCUsers");
                });

            modelBuilder.Entity("STRACT.Identity.General.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValues")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("STRACT.Identity.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("BLOB");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ActivityFunctionalRole", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.FunctionalRole", null)
                        .WithMany()
                        .HasForeignKey("FunctionalRolesFunctionalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivityOrganizationalRole", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.OrganizationalRole", null)
                        .WithMany()
                        .HasForeignKey("OrganizationalRolesOrganizationalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivitySkill", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Audit", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.CertificationLine", "CertificationLine")
                        .WithMany("Audits")
                        .HasForeignKey("CertificationLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.General.Location", "Location")
                        .WithMany("Audits")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Users.User", "User")
                        .WithMany("Audits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificationLine");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Certificate", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.CertificationLine", "CertificationLine")
                        .WithMany("Certificates")
                        .HasForeignKey("CertificationLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificationLine");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificateProductLine", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.Certificate", "Certificate")
                        .WithMany("CertificateProductLines")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.General.LineOfProduct", "LineOfProduct")
                        .WithMany("CertificateProductLines")
                        .HasForeignKey("LineOfProductId");

                    b.Navigation("Certificate");

                    b.Navigation("LineOfProduct");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificationLine", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.Entity", "Entity")
                        .WithMany("CertificationLines")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.ContactPerson", b =>
                {
                    b.HasOne("STRACT.Entities.Certifications.Entity", "Entity")
                        .WithMany("Contacts")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.CommissionForProject", b =>
                {
                    b.HasOne("STRACT.Entities.CommissionProposals.Commission", "Commission")
                        .WithMany("CommissionForProjects")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commission");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Decision", b =>
                {
                    b.HasOne("STRACT.Entities.CommissionProposals.Commission", "Commission")
                        .WithMany("Decisions")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.CommissionProposals.ProposalStatus", "Status")
                        .WithMany("Decisions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commission");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Proposal", b =>
                {
                    b.HasOne("STRACT.Entities.CommissionProposals.Commission", "Commission")
                        .WithMany("Proposals")
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.Users.User", "Responsible")
                        .WithMany("Proposals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commission");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationItem", b =>
                {
                    b.HasOne("STRACT.Entities.Users.User", "User")
                        .WithMany("Declarations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationRevision", b =>
                {
                    b.HasOne("STRACT.Entities.Declaration.DeclarationItem", "DeclarationItem")
                        .WithMany("Revisions")
                        .HasForeignKey("DeclarationItemId");

                    b.HasOne("STRACT.Entities.Users.User", "User")
                        .WithMany("DeclarationRevisions")
                        .HasForeignKey("UserId");

                    b.Navigation("DeclarationItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationSignature", b =>
                {
                    b.HasOne("STRACT.Entities.Declaration.DeclarationItem", "Declaration")
                        .WithMany("Signatures")
                        .HasForeignKey("DeclarationId");

                    b.HasOne("STRACT.Entities.Users.User", "User")
                        .WithMany("DeclarationSignatures")
                        .HasForeignKey("UserId");

                    b.Navigation("Declaration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityInGroup", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.ActivityGroup", "ActivityGroup")
                        .WithMany("ActivityInGroups")
                        .HasForeignKey("ActivityGroupId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STRACT.Entities.HumanResources.Activity", "Activity")
                        .WithMany("ActivityInGroups")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ActivityGroup");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Skill", b =>
                {
                    b.HasOne("STRACT.Entities.HumanResources.SkillGroup", "SkillGroup")
                        .WithMany("Skills")
                        .HasForeignKey("SkillGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillGroup");
                });

            modelBuilder.Entity("STRACT.Entities.Users.User", b =>
                {
                    b.HasOne("STRACT.Identity.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("STRACT.Entities.HumanResources.OrganizationalRole", "OrganizationalRole")
                        .WithMany()
                        .HasForeignKey("OrganizationalRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("OrganizationalRole");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Certificate", b =>
                {
                    b.Navigation("CertificateProductLines");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.CertificationLine", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("STRACT.Entities.Certifications.Entity", b =>
                {
                    b.Navigation("CertificationLines");

                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.Commission", b =>
                {
                    b.Navigation("CommissionForProjects");

                    b.Navigation("Decisions");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("STRACT.Entities.CommissionProposals.ProposalStatus", b =>
                {
                    b.Navigation("Decisions");
                });

            modelBuilder.Entity("STRACT.Entities.Declaration.DeclarationItem", b =>
                {
                    b.Navigation("Revisions");

                    b.Navigation("Signatures");
                });

            modelBuilder.Entity("STRACT.Entities.General.LineOfProduct", b =>
                {
                    b.Navigation("CertificateProductLines");
                });

            modelBuilder.Entity("STRACT.Entities.General.Location", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.Activity", b =>
                {
                    b.Navigation("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.ActivityGroup", b =>
                {
                    b.Navigation("ActivityInGroups");
                });

            modelBuilder.Entity("STRACT.Entities.HumanResources.SkillGroup", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("STRACT.Entities.Users.User", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("DeclarationRevisions");

                    b.Navigation("Declarations");

                    b.Navigation("DeclarationSignatures");

                    b.Navigation("Proposals");
                });
#pragma warning restore 612, 618
        }
    }
}
